// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calling without \`outputFile\` returns the generated api 1`] = `
import { apiClient } from "./fixtures/emptyApi";
export const getHealthcheck = (
  args: GetHealthcheckApiArg
): Promise<GetHealthcheckApiResponse> => {
  return apiClient({ path: \`/healthcheck\` });
};
export const updatePet = (
  args: UpdatePetApiArg
): Promise<UpdatePetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "PUT", body: args.pet });
};
export const addPet = (args: AddPetApiArg): Promise<AddPetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "POST", body: args.pet });
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg
): Promise<FindPetsByStatusApiResponse> => {
  return apiClient({
    path: \`/pet/findByStatus\`,
    params: { status: args.status },
  });
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg
): Promise<FindPetsByTagsApiResponse> => {
  return apiClient({ path: \`/pet/findByTags\`, params: { tags: args.tags } });
};
export const getPetById = (
  args: GetPetByIdApiArg
): Promise<GetPetByIdApiResponse> => {
  return apiClient({ path: \`/pet/\${args.petId}\` });
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg
): Promise<UpdatePetWithFormApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "POST",
    params: { name: args.name, status: args.status },
  });
};
export const deletePet = (
  args: DeletePetApiArg
): Promise<DeletePetApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "DELETE",
    headers: { api_key: args.apiKey },
  });
};
export const uploadFile = (
  args: UploadFileApiArg
): Promise<UploadFileApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}/uploadImage\`,
    method: "POST",
    body: args.body,
    params: { additionalMetadata: args.additionalMetadata },
  });
};
export const getInventory = (
  args: GetInventoryApiArg
): Promise<GetInventoryApiResponse> => {
  return apiClient({ path: \`/store/inventory\` });
};
export const placeOrder = (
  args: PlaceOrderApiArg
): Promise<PlaceOrderApiResponse> => {
  return apiClient({ path: \`/store/order\`, method: "POST", body: args.order });
};
export const getOrderById = (
  args: GetOrderByIdApiArg
): Promise<GetOrderByIdApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\` });
};
export const deleteOrder = (
  args: DeleteOrderApiArg
): Promise<DeleteOrderApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\`, method: "DELETE" });
};
export const createUser = (
  args: CreateUserApiArg
): Promise<CreateUserApiResponse> => {
  return apiClient({ path: \`/user\`, method: "POST", body: args.user });
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg
): Promise<CreateUsersWithListInputApiResponse> => {
  return apiClient({
    path: \`/user/createWithList\`,
    method: "POST",
    body: args.body,
  });
};
export const loginUser = (
  args: LoginUserApiArg
): Promise<LoginUserApiResponse> => {
  return apiClient({
    path: \`/user/login\`,
    params: { username: args.username, password: args.password },
  });
};
export const logoutUser = (
  args: LogoutUserApiArg
): Promise<LogoutUserApiResponse> => {
  return apiClient({ path: \`/user/logout\` });
};
export const getUserByName = (
  args: GetUserByNameApiArg
): Promise<GetUserByNameApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\` });
};
export const updateUser = (
  args: UpdateUserApiArg
): Promise<UpdateUserApiResponse> => {
  return apiClient({
    path: \`/user/\${args.username}\`,
    method: "PUT",
    body: args.user,
  });
};
export const deleteUser = (
  args: DeleteUserApiArg
): Promise<DeleteUserApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\`, method: "DELETE" });
};
export type GetHealthcheckApiResponse = /** status 200 OK */ {
  message: string;
};
export type GetHealthcheckApiArg = void;
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {
  /** Update an existent pet in the store */
  pet: Pet;
};
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {
  /** Create a new pet in the store */
  pet: Pet;
};
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {
  order: Order;
};
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {
  /** Created user object */
  user: User;
};
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
  /** Update an existent user in the store */
  user: User;
};
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;

exports[`endpoint filtering: should only have endpoints loginUser, placeOrder, getOrderById, deleteOrder 1`] = `
import { apiClient } from "./fixtures/emptyApi";
export const placeOrder = (
  args: PlaceOrderApiArg
): Promise<PlaceOrderApiResponse> => {
  return apiClient({ path: \`/store/order\`, method: "POST", body: args.order });
};
export const getOrderById = (
  args: GetOrderByIdApiArg
): Promise<GetOrderByIdApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\` });
};
export const deleteOrder = (
  args: DeleteOrderApiArg
): Promise<DeleteOrderApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\`, method: "DELETE" });
};
export const loginUser = (
  args: LoginUserApiArg
): Promise<LoginUserApiResponse> => {
  return apiClient({
    path: \`/user/login\`,
    params: { username: args.username, password: args.password },
  });
};
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {
  order: Order;
};
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};

`;

exports[`should use brackets in a querystring urls arg, when the arg contains full stops 1`] = `
import { apiClient } from "./fixtures/emptyApi";
export const patchApiV1ListByItemId = (
  args: PatchApiV1ListByItemIdApiArg
): Promise<PatchApiV1ListByItemIdApiResponse> => {
  return apiClient({
    path: \`/api/v1/list/\${args["item.id"]}\`,
    method: "PATCH",
  });
};
export type PatchApiV1ListByItemIdApiResponse =
  /** status 200 A successful response. */ string;
export type PatchApiV1ListByItemIdApiArg = {
  "item.id": string;
};

`;

exports[`tests from issues issue #2002: should be able to generate proper intersection types 1`] = `
import { apiClient } from "./tmp/emptyApi";
export const getApiV1Animals = (
  args: GetApiV1AnimalsApiArg
): Promise<GetApiV1AnimalsApiResponse> => {
  return apiClient({ path: \`/api/v1/animals\`, params: { type: args["type"] } });
};
export type GetApiV1AnimalsApiResponse = /** status 200 Success */ (
  | Dog
  | Cat
)[];
export type GetApiV1AnimalsApiArg = {
  type?: AnimalType;
};
export type AnimalType = "All" | "Cats" | "Dogs";
export type Animal = {
  type: AnimalType;
  id?: number | undefined;
  name?: (string | null) | undefined;
};
export type Dog = Animal & {
  dogUniqueProp?: (string | null) | undefined;
};
export type Cat = Animal & {
  catUniqueProp?: (string | null) | undefined;
};

`;

exports[`yaml parsing should be able to use read a yaml file 1`] = `
import { apiClient } from "./tmp/emptyApi";
export const updatePet = (
  args: UpdatePetApiArg
): Promise<UpdatePetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "PUT", body: args.pet });
};
export const addPet = (args: AddPetApiArg): Promise<AddPetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "POST", body: args.pet });
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg
): Promise<FindPetsByStatusApiResponse> => {
  return apiClient({
    path: \`/pet/findByStatus\`,
    params: { status: args.status },
  });
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg
): Promise<FindPetsByTagsApiResponse> => {
  return apiClient({ path: \`/pet/findByTags\`, params: { tags: args.tags } });
};
export const getPetById = (
  args: GetPetByIdApiArg
): Promise<GetPetByIdApiResponse> => {
  return apiClient({ path: \`/pet/\${args.petId}\` });
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg
): Promise<UpdatePetWithFormApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "POST",
    params: { name: args.name, status: args.status },
  });
};
export const deletePet = (
  args: DeletePetApiArg
): Promise<DeletePetApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "DELETE",
    headers: { api_key: args.apiKey },
  });
};
export const uploadFile = (
  args: UploadFileApiArg
): Promise<UploadFileApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}/uploadImage\`,
    method: "POST",
    body: args.body,
    params: { additionalMetadata: args.additionalMetadata },
  });
};
export const getInventory = (
  args: GetInventoryApiArg
): Promise<GetInventoryApiResponse> => {
  return apiClient({ path: \`/store/inventory\` });
};
export const placeOrder = (
  args: PlaceOrderApiArg
): Promise<PlaceOrderApiResponse> => {
  return apiClient({ path: \`/store/order\`, method: "POST", body: args.order });
};
export const getOrderById = (
  args: GetOrderByIdApiArg
): Promise<GetOrderByIdApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\` });
};
export const deleteOrder = (
  args: DeleteOrderApiArg
): Promise<DeleteOrderApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\`, method: "DELETE" });
};
export const createUser = (
  args: CreateUserApiArg
): Promise<CreateUserApiResponse> => {
  return apiClient({ path: \`/user\`, method: "POST", body: args.user });
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg
): Promise<CreateUsersWithListInputApiResponse> => {
  return apiClient({
    path: \`/user/createWithList\`,
    method: "POST",
    body: args.body,
  });
};
export const loginUser = (
  args: LoginUserApiArg
): Promise<LoginUserApiResponse> => {
  return apiClient({
    path: \`/user/login\`,
    params: { username: args.username, password: args.password },
  });
};
export const logoutUser = (
  args: LogoutUserApiArg
): Promise<LogoutUserApiResponse> => {
  return apiClient({ path: \`/user/logout\` });
};
export const getUserByName = (
  args: GetUserByNameApiArg
): Promise<GetUserByNameApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\` });
};
export const updateUser = (
  args: UpdateUserApiArg
): Promise<UpdateUserApiResponse> => {
  return apiClient({
    path: \`/user/\${args.username}\`,
    method: "PUT",
    body: args.user,
  });
};
export const deleteUser = (
  args: DeleteUserApiArg
): Promise<DeleteUserApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\`, method: "DELETE" });
};
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {
  /** Update an existent pet in the store */
  pet: Pet;
};
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {
  /** Create a new pet in the store */
  pet: Pet;
};
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {
  order: Order;
};
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {
  /** Created user object */
  user: User;
};
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
  /** Update an existent user in the store */
  user: User;
};
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;

exports[`yaml parsing should generate params with non quoted keys if they don't contain special characters 1`] = `
import { apiClient } from "./tmp/emptyApi";
export const getStructureDefinition = (
  args: GetStructureDefinitionApiArg
): Promise<GetStructureDefinitionApiResponse> => {
  return apiClient({
    path: \`/StructureDefinition\`,
    params: {
      foo: args.foo,
      _foo: args._foo,
      "-bar-bar": args["-bar-bar"],
      _bar_bar: args._bar_bar,
      "foo:bar-foo.bar/foo": args["foo:bar-foo.bar/foo"],
      foo_bar: args.fooBar,
      namingConflict: args.namingConflict,
      naming_conflict: args.naming_conflict,
    },
  });
};
export type GetStructureDefinitionApiResponse = unknown;
export type GetStructureDefinitionApiArg = {
  /** Some description */
  foo?: any;
  /** Some description */
  _foo?: any;
  /** Some description */
  "-bar-bar"?: any;
  /** Some description */
  _bar_bar?: any;
  /** Some description */
  "foo:bar-foo.bar/foo"?: any;
  /** Some description */
  fooBar?: any;
  /** Some description */
  namingConflict?: any;
  /** Some description */
  naming_conflict?: any;
};

`;

exports[`yaml parsing should parse a yaml schema from a URL 1`] = `
import { apiClient } from "./tmp/emptyApi";
export const updatePet = (
  args: UpdatePetApiArg
): Promise<UpdatePetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "PUT", body: args.pet });
};
export const addPet = (args: AddPetApiArg): Promise<AddPetApiResponse> => {
  return apiClient({ path: \`/pet\`, method: "POST", body: args.pet });
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg
): Promise<FindPetsByStatusApiResponse> => {
  return apiClient({
    path: \`/pet/findByStatus\`,
    params: { status: args.status },
  });
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg
): Promise<FindPetsByTagsApiResponse> => {
  return apiClient({ path: \`/pet/findByTags\`, params: { tags: args.tags } });
};
export const getPetById = (
  args: GetPetByIdApiArg
): Promise<GetPetByIdApiResponse> => {
  return apiClient({ path: \`/pet/\${args.petId}\` });
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg
): Promise<UpdatePetWithFormApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "POST",
    params: { name: args.name, status: args.status },
  });
};
export const deletePet = (
  args: DeletePetApiArg
): Promise<DeletePetApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}\`,
    method: "DELETE",
    headers: { api_key: args.apiKey },
  });
};
export const uploadFile = (
  args: UploadFileApiArg
): Promise<UploadFileApiResponse> => {
  return apiClient({
    path: \`/pet/\${args.petId}/uploadImage\`,
    method: "POST",
    body: args.body,
    params: { additionalMetadata: args.additionalMetadata },
  });
};
export const getInventory = (
  args: GetInventoryApiArg
): Promise<GetInventoryApiResponse> => {
  return apiClient({ path: \`/store/inventory\` });
};
export const placeOrder = (
  args: PlaceOrderApiArg
): Promise<PlaceOrderApiResponse> => {
  return apiClient({ path: \`/store/order\`, method: "POST", body: args.order });
};
export const getOrderById = (
  args: GetOrderByIdApiArg
): Promise<GetOrderByIdApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\` });
};
export const deleteOrder = (
  args: DeleteOrderApiArg
): Promise<DeleteOrderApiResponse> => {
  return apiClient({ path: \`/store/order/\${args.orderId}\`, method: "DELETE" });
};
export const createUser = (
  args: CreateUserApiArg
): Promise<CreateUserApiResponse> => {
  return apiClient({ path: \`/user\`, method: "POST", body: args.user });
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg
): Promise<CreateUsersWithListInputApiResponse> => {
  return apiClient({
    path: \`/user/createWithList\`,
    method: "POST",
    body: args.body,
  });
};
export const loginUser = (
  args: LoginUserApiArg
): Promise<LoginUserApiResponse> => {
  return apiClient({
    path: \`/user/login\`,
    params: { username: args.username, password: args.password },
  });
};
export const logoutUser = (
  args: LogoutUserApiArg
): Promise<LogoutUserApiResponse> => {
  return apiClient({ path: \`/user/logout\` });
};
export const getUserByName = (
  args: GetUserByNameApiArg
): Promise<GetUserByNameApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\` });
};
export const updateUser = (
  args: UpdateUserApiArg
): Promise<UpdateUserApiResponse> => {
  return apiClient({
    path: \`/user/\${args.username}\`,
    method: "PUT",
    body: args.user,
  });
};
export const deleteUser = (
  args: DeleteUserApiArg
): Promise<DeleteUserApiResponse> => {
  return apiClient({ path: \`/user/\${args.username}\`, method: "DELETE" });
};
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {
  /** Update an existent pet in the store */
  pet: Pet;
};
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {
  /** Create a new pet in the store */
  pet: Pet;
};
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {
  order: Order;
};
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {
  /** Created user object */
  user: User;
};
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
  /** Update an existent user in the store */
  user: User;
};
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;
