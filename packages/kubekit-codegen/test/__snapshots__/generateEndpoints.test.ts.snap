// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calling without \`outputFile\` returns the generated api 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./fixtures/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const getHealthcheck = (
  args: GetHealthcheckApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<GetHealthcheckApiResponse>>(
    { path: \`/healthcheck\` },
    options
  );
};
export const updatePet = (args: UpdatePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdatePetApiResponse>>(
    {
      path: \`/pet\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const addPet = (args: AddPetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<AddPetApiResponse>>(
    {
      path: \`/pet\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByStatusApiResponse>>(
    { path: \`/pet/findByStatus\`, params: { status: args.status } },
    options
  );
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByTagsApiResponse>>(
    { path: \`/pet/findByTags\`, params: { tags: args.tags } },
    options
  );
};
export const getPetById = (args: GetPetByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetPetByIdApiResponse>>(
    { path: \`/pet/\${args.petId}\` },
    options
  );
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<UpdatePetWithFormApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "POST",
      params: { name: args.name, status: args.status },
    },
    options
  );
};
export const deletePet = (args: DeletePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeletePetApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "DELETE",
      headers: { api_key: args.apiKey },
    },
    options
  );
};
export const uploadFile = (args: UploadFileApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UploadFileApiResponse>>(
    {
      path: \`/pet/\${args.petId}/uploadImage\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
      params: { additionalMetadata: args.additionalMetadata },
    },
    options
  );
};
export const getInventory = (args: GetInventoryApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetInventoryApiResponse>>(
    { path: \`/store/inventory\` },
    options
  );
};
export const placeOrder = (args: PlaceOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<PlaceOrderApiResponse>>(
    {
      path: \`/store/order\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const getOrderById = (args: GetOrderByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetOrderByIdApiResponse>>(
    { path: \`/store/order/\${args.orderId}\` },
    options
  );
};
export const deleteOrder = (args: DeleteOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteOrderApiResponse>>(
    { path: \`/store/order/\${args.orderId}\`, method: "DELETE" },
    options
  );
};
export const createUser = (args: CreateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<CreateUserApiResponse>>(
    {
      path: \`/user\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<CreateUsersWithListInputApiResponse>>(
    {
      path: \`/user/createWithList\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const loginUser = (args: LoginUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LoginUserApiResponse>>(
    {
      path: \`/user/login\`,
      params: { username: args.username, password: args.password },
    },
    options
  );
};
export const logoutUser = (args: LogoutUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LogoutUserApiResponse>>(
    { path: \`/user/logout\` },
    options
  );
};
export const getUserByName = (args: GetUserByNameApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetUserByNameApiResponse>>(
    { path: \`/user/\${args.username}\` },
    options
  );
};
export const updateUser = (args: UpdateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdateUserApiResponse>>(
    {
      path: \`/user/\${args.username}\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const deleteUser = (args: DeleteUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteUserApiResponse>>(
    { path: \`/user/\${args.username}\`, method: "DELETE" },
    options
  );
};
export type GetHealthcheckApiResponse = /** status 200 OK */ {
  message: string;
};
export type GetHealthcheckApiArg = void;
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
} & {
  contentType: "application/octet-stream";
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {} & (
  | {
      contentType: "application/json";
      body: Order;
    }
  | {
      contentType: "application/xml";
      body: Order;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Order;
    }
);
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {} & {
  contentType: "application/json";
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;

exports[`duplicate parameter names must be prefixed with a path or query prefix 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./fixtures/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const patchApiV1ListByItemId = (
  args: PatchApiV1ListByItemIdApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<PatchApiV1ListByItemIdApiResponse>>(
    { path: \`/api/v1/list/\${args["item.id"]}\`, method: "PATCH" },
    options
  );
};
export const patchApiV2BySomeName = (
  args: PatchApiV2BySomeNameApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<PatchApiV2BySomeNameApiResponse>>(
    {
      path: \`/api/v2/\${args.pathSomeName}\`,
      method: "PATCH",
      params: { some_name: args.querySomeName },
    },
    options
  );
};
export type PatchApiV1ListByItemIdApiResponse =
  /** status 200 A successful response. */ string;
export type PatchApiV1ListByItemIdApiArg = {
  "item.id": string;
};
export type PatchApiV2BySomeNameApiResponse =
  /** status 200 A successful response. */ string;
export type PatchApiV2BySomeNameApiArg = {
  pathSomeName: string;
  querySomeName: string;
};

`;

exports[`endpoint filtering: should only have endpoints loginUser, placeOrder, getOrderById, deleteOrder 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./fixtures/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const placeOrder = (args: PlaceOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<PlaceOrderApiResponse>>(
    {
      path: \`/store/order\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const getOrderById = (args: GetOrderByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetOrderByIdApiResponse>>(
    { path: \`/store/order/\${args.orderId}\` },
    options
  );
};
export const deleteOrder = (args: DeleteOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteOrderApiResponse>>(
    { path: \`/store/order/\${args.orderId}\`, method: "DELETE" },
    options
  );
};
export const loginUser = (args: LoginUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LoginUserApiResponse>>(
    {
      path: \`/user/login\`,
      params: { username: args.username, password: args.password },
    },
    options
  );
};
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {} & (
  | {
      contentType: "application/json";
      body: Order;
    }
  | {
      contentType: "application/xml";
      body: Order;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Order;
    }
);
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};

`;

exports[`should use brackets in a querystring urls arg, when the arg contains full stops 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./fixtures/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const patchApiV1ListByItemId = (
  args: PatchApiV1ListByItemIdApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<PatchApiV1ListByItemIdApiResponse>>(
    { path: \`/api/v1/list/\${args["item.id"]}\`, method: "PATCH" },
    options
  );
};
export const patchApiV2BySomeName = (
  args: PatchApiV2BySomeNameApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<PatchApiV2BySomeNameApiResponse>>(
    {
      path: \`/api/v2/\${args.pathSomeName}\`,
      method: "PATCH",
      params: { some_name: args.querySomeName },
    },
    options
  );
};
export type PatchApiV1ListByItemIdApiResponse =
  /** status 200 A successful response. */ string;
export type PatchApiV1ListByItemIdApiArg = {
  "item.id": string;
};
export type PatchApiV2BySomeNameApiResponse =
  /** status 200 A successful response. */ string;
export type PatchApiV2BySomeNameApiArg = {
  pathSomeName: string;
  querySomeName: string;
};

`;

exports[`tests from issues issue #2002: should be able to generate proper intersection types 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./tmp/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const getApiV1Animals = (
  args: GetApiV1AnimalsApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<GetApiV1AnimalsApiResponse>>(
    { path: \`/api/v1/animals\`, params: { type: args["type"] } },
    options
  );
};
export type GetApiV1AnimalsApiResponse = /** status 200 Success */ (
  | Dog
  | Cat
)[];
export type GetApiV1AnimalsApiArg = {
  type?: AnimalType;
};
export type Cat = Animal & {
  catUniqueProp?: (string | null) | undefined;
};
export type Animal = Dog | Cat;
export type Dog = Animal & {
  dogUniqueProp?: (string | null) | undefined;
};
export type AnimalType = "All" | "Cats" | "Dogs";

`;

exports[`yaml parsing should be able to use read a yaml file 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./tmp/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const updatePet = (args: UpdatePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdatePetApiResponse>>(
    {
      path: \`/pet\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const addPet = (args: AddPetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<AddPetApiResponse>>(
    {
      path: \`/pet\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByStatusApiResponse>>(
    { path: \`/pet/findByStatus\`, params: { status: args.status } },
    options
  );
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByTagsApiResponse>>(
    { path: \`/pet/findByTags\`, params: { tags: args.tags } },
    options
  );
};
export const getPetById = (args: GetPetByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetPetByIdApiResponse>>(
    { path: \`/pet/\${args.petId}\` },
    options
  );
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<UpdatePetWithFormApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "POST",
      params: { name: args.name, status: args.status },
    },
    options
  );
};
export const deletePet = (args: DeletePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeletePetApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "DELETE",
      headers: { api_key: args.apiKey },
    },
    options
  );
};
export const uploadFile = (args: UploadFileApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UploadFileApiResponse>>(
    {
      path: \`/pet/\${args.petId}/uploadImage\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
      params: { additionalMetadata: args.additionalMetadata },
    },
    options
  );
};
export const getInventory = (args: GetInventoryApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetInventoryApiResponse>>(
    { path: \`/store/inventory\` },
    options
  );
};
export const placeOrder = (args: PlaceOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<PlaceOrderApiResponse>>(
    {
      path: \`/store/order\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const getOrderById = (args: GetOrderByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetOrderByIdApiResponse>>(
    { path: \`/store/order/\${args.orderId}\` },
    options
  );
};
export const deleteOrder = (args: DeleteOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteOrderApiResponse>>(
    { path: \`/store/order/\${args.orderId}\`, method: "DELETE" },
    options
  );
};
export const createUser = (args: CreateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<CreateUserApiResponse>>(
    {
      path: \`/user\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<CreateUsersWithListInputApiResponse>>(
    {
      path: \`/user/createWithList\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const loginUser = (args: LoginUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LoginUserApiResponse>>(
    {
      path: \`/user/login\`,
      params: { username: args.username, password: args.password },
    },
    options
  );
};
export const logoutUser = (args: LogoutUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LogoutUserApiResponse>>(
    { path: \`/user/logout\` },
    options
  );
};
export const getUserByName = (args: GetUserByNameApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetUserByNameApiResponse>>(
    { path: \`/user/\${args.username}\` },
    options
  );
};
export const updateUser = (args: UpdateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdateUserApiResponse>>(
    {
      path: \`/user/\${args.username}\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const deleteUser = (args: DeleteUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteUserApiResponse>>(
    { path: \`/user/\${args.username}\`, method: "DELETE" },
    options
  );
};
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
} & {
  contentType: "application/octet-stream";
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {} & (
  | {
      contentType: "application/json";
      body: Order;
    }
  | {
      contentType: "application/xml";
      body: Order;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Order;
    }
);
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {} & {
  contentType: "application/json";
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;

exports[`yaml parsing should generate params with non quoted keys if they don't contain special characters 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./tmp/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const getStructureDefinition = (
  args: GetStructureDefinitionApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<GetStructureDefinitionApiResponse>>(
    {
      path: \`/StructureDefinition\`,
      params: {
        foo: args.foo,
        _foo: args._foo,
        "-bar-bar": args["-bar-bar"],
        _bar_bar: args._bar_bar,
        "foo:bar-foo.bar/foo": args["foo:bar-foo.bar/foo"],
        foo_bar: args.fooBar,
        namingConflict: args.namingConflict,
        naming_conflict: args.naming_conflict,
      },
    },
    options
  );
};
export type GetStructureDefinitionApiResponse =
  /** status 200 Success */ FhirJsonResource;
export type GetStructureDefinitionApiArg = {
  /** Some description */
  foo?: any;
  /** Some description */
  _foo?: any;
  /** Some description */
  "-bar-bar"?: any;
  /** Some description */
  _bar_bar?: any;
  /** Some description */
  "foo:bar-foo.bar/foo"?: any;
  /** Some description */
  fooBar?: any;
  /** Some description */
  namingConflict?: any;
  /** Some description */
  naming_conflict?: any;
};
export type FhirJsonResource = object;

`;

exports[`yaml parsing should parse a yaml schema from a URL 1`] = `
import {
  apiClient,
  type Options,
  type WatchExtraOptions,
} from "./tmp/k8sApiClient";
type NoWatch<T> = Omit<T, "watch"> & {
  watch?: false;
};
type PartialRequired<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
type MinimumRequiredGet<T> = T extends {
  metadata?: any;
  apiVersion?: any;
  kind?: any;
}
  ? Omit<PartialRequired<T, "metadata" | "apiVersion" | "kind">, "metadata"> & {
      metadata: PartialRequired<
        Required<T>["metadata"],
        "name" | "namespace" | "creationTimestamp" | "resourceVersion"
      >;
    }
  : T;
type MinimumRequiredList<T> = T extends {
  items: {
    metadata?: any;
    apiVersion?: any;
    kind?: any;
  }[];
}
  ? Omit<T, "items"> & {
      items: MinimumRequiredGet<T["items"][number]>[];
    }
  : T;
export const updatePet = (args: UpdatePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdatePetApiResponse>>(
    {
      path: \`/pet\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const addPet = (args: AddPetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<AddPetApiResponse>>(
    {
      path: \`/pet\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const findPetsByStatus = (
  args: FindPetsByStatusApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByStatusApiResponse>>(
    { path: \`/pet/findByStatus\`, params: { status: args.status } },
    options
  );
};
export const findPetsByTags = (
  args: FindPetsByTagsApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<FindPetsByTagsApiResponse>>(
    { path: \`/pet/findByTags\`, params: { tags: args.tags } },
    options
  );
};
export const getPetById = (args: GetPetByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetPetByIdApiResponse>>(
    { path: \`/pet/\${args.petId}\` },
    options
  );
};
export const updatePetWithForm = (
  args: UpdatePetWithFormApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<UpdatePetWithFormApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "POST",
      params: { name: args.name, status: args.status },
    },
    options
  );
};
export const deletePet = (args: DeletePetApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeletePetApiResponse>>(
    {
      path: \`/pet/\${args.petId}\`,
      method: "DELETE",
      headers: { api_key: args.apiKey },
    },
    options
  );
};
export const uploadFile = (args: UploadFileApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UploadFileApiResponse>>(
    {
      path: \`/pet/\${args.petId}/uploadImage\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
      params: { additionalMetadata: args.additionalMetadata },
    },
    options
  );
};
export const getInventory = (args: GetInventoryApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetInventoryApiResponse>>(
    { path: \`/store/inventory\` },
    options
  );
};
export const placeOrder = (args: PlaceOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<PlaceOrderApiResponse>>(
    {
      path: \`/store/order\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const getOrderById = (args: GetOrderByIdApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetOrderByIdApiResponse>>(
    { path: \`/store/order/\${args.orderId}\` },
    options
  );
};
export const deleteOrder = (args: DeleteOrderApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteOrderApiResponse>>(
    { path: \`/store/order/\${args.orderId}\`, method: "DELETE" },
    options
  );
};
export const createUser = (args: CreateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<CreateUserApiResponse>>(
    {
      path: \`/user\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const createUsersWithListInput = (
  args: CreateUsersWithListInputApiArg,
  options?: Options
) => {
  return apiClient<MinimumRequiredGet<CreateUsersWithListInputApiResponse>>(
    {
      path: \`/user/createWithList\`,
      method: "POST",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const loginUser = (args: LoginUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LoginUserApiResponse>>(
    {
      path: \`/user/login\`,
      params: { username: args.username, password: args.password },
    },
    options
  );
};
export const logoutUser = (args: LogoutUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<LogoutUserApiResponse>>(
    { path: \`/user/logout\` },
    options
  );
};
export const getUserByName = (args: GetUserByNameApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<GetUserByNameApiResponse>>(
    { path: \`/user/\${args.username}\` },
    options
  );
};
export const updateUser = (args: UpdateUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<UpdateUserApiResponse>>(
    {
      path: \`/user/\${args.username}\`,
      method: "PUT",
      body: args.body,
      contentType: args.contentType,
    },
    options
  );
};
export const deleteUser = (args: DeleteUserApiArg, options?: Options) => {
  return apiClient<MinimumRequiredGet<DeleteUserApiResponse>>(
    { path: \`/user/\${args.username}\`, method: "DELETE" },
    options
  );
};
export type UpdatePetApiResponse = /** status 200 Successful operation */ Pet;
export type UpdatePetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type AddPetApiResponse = /** status 200 Successful operation */ Pet;
export type AddPetApiArg = {} & (
  | {
      contentType: "application/json";
      body: Pet;
    }
  | {
      contentType: "application/xml";
      body: Pet;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Pet;
    }
);
export type FindPetsByStatusApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByStatusApiArg = {
  /** Status values that need to be considered for filter */
  status?: "available" | "pending" | "sold";
};
export type FindPetsByTagsApiResponse =
  /** status 200 successful operation */ Pet[];
export type FindPetsByTagsApiArg = {
  /** Tags to filter by */
  tags?: string[];
};
export type GetPetByIdApiResponse = /** status 200 successful operation */ Pet;
export type GetPetByIdApiArg = {
  /** ID of pet to return */
  petId: number;
};
export type UpdatePetWithFormApiResponse = unknown;
export type UpdatePetWithFormApiArg = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};
export type DeletePetApiResponse = unknown;
export type DeletePetApiArg = {
  apiKey?: string;
  /** Pet id to delete */
  petId: number;
};
export type UploadFileApiResponse =
  /** status 200 successful operation */ ApiResponse;
export type UploadFileApiArg = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
} & {
  contentType: "application/octet-stream";
  body: Blob;
};
export type GetInventoryApiResponse = /** status 200 successful operation */ {
  [key: string]: number;
};
export type GetInventoryApiArg = void;
export type PlaceOrderApiResponse =
  /** status 200 successful operation */ Order;
export type PlaceOrderApiArg = {} & (
  | {
      contentType: "application/json";
      body: Order;
    }
  | {
      contentType: "application/xml";
      body: Order;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: Order;
    }
);
export type GetOrderByIdApiResponse =
  /** status 200 successful operation */ Order;
export type GetOrderByIdApiArg = {
  /** ID of order that needs to be fetched */
  orderId: number;
};
export type DeleteOrderApiResponse = unknown;
export type DeleteOrderApiArg = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};
export type CreateUserApiResponse = unknown;
export type CreateUserApiArg = {} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type CreateUsersWithListInputApiResponse =
  /** status 200 Successful operation */ User;
export type CreateUsersWithListInputApiArg = {} & {
  contentType: "application/json";
  body: User[];
};
export type LoginUserApiResponse =
  /** status 200 successful operation */ string;
export type LoginUserApiArg = {
  /** The user name for login */
  username?: string;
  /** The password for login in clear text */
  password?: string;
};
export type LogoutUserApiResponse = unknown;
export type LogoutUserApiArg = void;
export type GetUserByNameApiResponse =
  /** status 200 successful operation */ User;
export type GetUserByNameApiArg = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};
export type UpdateUserApiResponse = unknown;
export type UpdateUserApiArg = {
  /** name that need to be deleted */
  username: string;
} & (
  | {
      contentType: "application/json";
      body: User;
    }
  | {
      contentType: "application/xml";
      body: User;
    }
  | {
      contentType: "application/x-www-form-urlencoded";
      body: User;
    }
);
export type DeleteUserApiResponse = unknown;
export type DeleteUserApiArg = {
  /** The name that needs to be deleted */
  username: string;
};
export type Category = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Tag = {
  id?: number | undefined;
  name?: string | undefined;
};
export type Pet = {
  id?: number | undefined;
  name: string;
  category?: Category | undefined;
  photoUrls: string[];
  tags?: Tag[] | undefined;
  status?: ("available" | "pending" | "sold") | undefined;
};
export type ApiResponse = {
  code?: number | undefined;
  type?: string | undefined;
  message?: string | undefined;
};
export type Order = {
  id?: number | undefined;
  petId?: number | undefined;
  quantity?: number | undefined;
  shipDate?: string | undefined;
  status?: ("placed" | "approved" | "delivered") | undefined;
  complete?: boolean | undefined;
};
export type User = {
  id?: number | undefined;
  username?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone?: string | undefined;
  userStatus?: number | undefined;
};

`;
